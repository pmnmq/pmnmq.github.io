<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>rpc - 标签 - pujic</title><link>http://example.org/tags/rpc/</link><description>rpc - 标签 - pujic</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>pujichun@outlook.com (普吉春)</managingEditor><webMaster>pujichun@outlook.com (普吉春)</webMaster><lastBuildDate>Sun, 28 Feb 2021 15:39:19 +0000</lastBuildDate><atom:link href="http://example.org/tags/rpc/" rel="self" type="application/rss+xml"/><item><title>grpc框架使用</title><link>http://example.org/posts/grpc%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/</link><pubDate>Sun, 28 Feb 2021 15:39:19 +0000</pubDate><author>作者</author><guid>http://example.org/posts/grpc%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/</guid><description>&lt;blockquote>
&lt;p>gRPC是可以在任何环境中运行的现代开源高性能RPC框架。 它可以通过可插拔的支持来有效地连接数据中心内和跨数据中心的服务，以实现负载平衡，跟踪，运行状况检查和身份验证。 它也适用于分布式计算的最后一英里，以将设备，移动应用程序和浏览器连接到后端服务。&lt;/p>
&lt;/blockquote></description></item><item><title>go-rpc</title><link>http://example.org/posts/go-rpc/</link><pubDate>Fri, 26 Feb 2021 14:06:30 +0000</pubDate><author>作者</author><guid>http://example.org/posts/go-rpc/</guid><description>&lt;p>在传统的Web服务中，通常是一个服务器完成一套或多套部署方案，但是随着用户的快速增长，一个服务器上的服务要完成的工作量越来越大而且也越来越复杂，就算使用多线程进行处理，但是因为业务逻辑的复杂性导致线程进行等待的时间变得很长，那么这时候就需要对业务进行拆分，将复杂的业务拆分为一个一个的小业务。比如大多数用户对网站首页发起请求的时候，如果所有业务逻辑都在一个服务上，不考虑其他页面的业务逻辑，就单纯请求首页的压力都是巨大的，而且一旦业务复杂，想要在后端实现并发难度是十分大的，但是如果我们将一个个业务进行解耦出来，那么业务逻辑将变得简单简单清晰，同时相对应的一些服务将能够容易的并发起来&lt;/p>
&lt;p>随着微服务架构的兴起，RPC的应用越来越广泛&lt;/p></description></item></channel></rss>