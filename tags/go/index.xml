<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Go - 标签 - pujic</title><link>http://example.org/tags/go/</link><description>Go - 标签 - pujic</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>pujichun@outlook.com (普吉春)</managingEditor><webMaster>pujichun@outlook.com (普吉春)</webMaster><lastBuildDate>Sun, 22 May 2022 13:02:44 +0800</lastBuildDate><atom:link href="http://example.org/tags/go/" rel="self" type="application/rss+xml"/><item><title>Go语言是如何运行的</title><link>http://example.org/posts/how-go-works/</link><pubDate>Sun, 22 May 2022 13:02:44 +0800</pubDate><author>作者</author><guid>http://example.org/posts/how-go-works/</guid><description>&lt;p>Go 是编译型语言，不依赖虚拟机，编译成二进制的可执行程序即可运行&lt;/p></description></item><item><title>Go操作Docker</title><link>http://example.org/posts/go%E6%93%8D%E4%BD%9Cdocker/</link><pubDate>Wed, 06 Apr 2022 13:18:12 +0800</pubDate><author>作者</author><guid>http://example.org/posts/go%E6%93%8D%E4%BD%9Cdocker/</guid><description>&lt;p>尽管Docker的操作十分简单，但是仍然不是所有开发者都会，大多数开发者往往只关注于本身所在领域，服务部署这件事情上并不擅长。&lt;/p></description></item><item><title>go开源工具合集2</title><link>http://example.org/posts/go%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7%E5%90%88%E9%9B%862/</link><pubDate>Fri, 18 Feb 2022 13:40:23 +0000</pubDate><author>作者</author><guid>http://example.org/posts/go%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7%E5%90%88%E9%9B%862/</guid><description>&lt;p>go开源工具合集2&lt;/p></description></item><item><title>go开源工具合集1</title><link>http://example.org/posts/go%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7%E5%90%88%E9%9B%861/</link><pubDate>Thu, 17 Feb 2022 17:57:36 +0000</pubDate><author>作者</author><guid>http://example.org/posts/go%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7%E5%90%88%E9%9B%861/</guid><description>&lt;p>分享Github上有趣的go开源项目&lt;/p></description></item><item><title>静态网站生成器Hugo</title><link>http://example.org/posts/%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E7%94%9F%E6%88%90%E5%99%A8hugo/</link><pubDate>Tue, 15 Feb 2022 14:45:00 +0000</pubDate><author>作者</author><guid>http://example.org/posts/%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E7%94%9F%E6%88%90%E5%99%A8hugo/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>作为一个程序员有自己的博客不仅可以记录我们自己的学习笔记、提升自己的知名度，并且在面试的时候也是加分利器。&lt;/p></description></item><item><title>单例模式</title><link>http://example.org/posts/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link><pubDate>Wed, 21 Apr 2021 12:20:45 +0000</pubDate><author>作者</author><guid>http://example.org/posts/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid><description>&lt;p>单例模式，属于创建类型的一种常用的软件设计模式。通过单例模式的方法创建的类在当前进程中只有一个实例&lt;/p></description></item><item><title>Kafka安装与使用</title><link>http://example.org/posts/kafka%E4%BD%BF%E7%94%A8/</link><pubDate>Fri, 09 Apr 2021 13:54:56 +0000</pubDate><author>作者</author><guid>http://example.org/posts/kafka%E4%BD%BF%E7%94%A8/</guid><description>&lt;p>Kafka是一个高吞吐率的分布式订阅消息队列，传统的关系存储型数据库，如MySQL、MongoDB都有一个痛点，那就是性能较差，在高并发访问的情况下很可能会奔溃掉。其实redis中有一个用于消息订阅的数据结构&lt;code>queue&lt;/code>，但是redis中的数据是放到内存当中的，如果消息量过大很可能会造成内存奔溃，而且如果机器发生故障，内存中的数据很可能会清空。&lt;/p></description></item><item><title>grpc框架使用</title><link>http://example.org/posts/grpc%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/</link><pubDate>Sun, 28 Feb 2021 15:39:19 +0000</pubDate><author>作者</author><guid>http://example.org/posts/grpc%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/</guid><description>&lt;blockquote>
&lt;p>gRPC是可以在任何环境中运行的现代开源高性能RPC框架。 它可以通过可插拔的支持来有效地连接数据中心内和跨数据中心的服务，以实现负载平衡，跟踪，运行状况检查和身份验证。 它也适用于分布式计算的最后一英里，以将设备，移动应用程序和浏览器连接到后端服务。&lt;/p>
&lt;/blockquote></description></item><item><title>go-rpc</title><link>http://example.org/posts/go-rpc/</link><pubDate>Fri, 26 Feb 2021 14:06:30 +0000</pubDate><author>作者</author><guid>http://example.org/posts/go-rpc/</guid><description>&lt;p>在传统的Web服务中，通常是一个服务器完成一套或多套部署方案，但是随着用户的快速增长，一个服务器上的服务要完成的工作量越来越大而且也越来越复杂，就算使用多线程进行处理，但是因为业务逻辑的复杂性导致线程进行等待的时间变得很长，那么这时候就需要对业务进行拆分，将复杂的业务拆分为一个一个的小业务。比如大多数用户对网站首页发起请求的时候，如果所有业务逻辑都在一个服务上，不考虑其他页面的业务逻辑，就单纯请求首页的压力都是巨大的，而且一旦业务复杂，想要在后端实现并发难度是十分大的，但是如果我们将一个个业务进行解耦出来，那么业务逻辑将变得简单简单清晰，同时相对应的一些服务将能够容易的并发起来&lt;/p>
&lt;p>随着微服务架构的兴起，RPC的应用越来越广泛&lt;/p></description></item><item><title>goroutine 02</title><link>http://example.org/posts/%E5%AD%A6%E4%B9%A0goroutine-2/</link><pubDate>Mon, 11 Jan 2021 16:35:08 +0000</pubDate><author>作者</author><guid>http://example.org/posts/%E5%AD%A6%E4%B9%A0goroutine-2/</guid><description>&lt;p>学习goroutine&lt;/p></description></item></channel></rss>