<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Python - 分类 - pujic</title><link>http://example.org/categories/python/</link><description>Python - 分类 - pujic</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>pujichun@outlook.com (普吉春)</managingEditor><webMaster>pujichun@outlook.com (普吉春)</webMaster><lastBuildDate>Mon, 14 Aug 2023 10:30:04 +0000</lastBuildDate><atom:link href="http://example.org/categories/python/" rel="self" type="application/rss+xml"/><item><title>poetry - python 的包管理工具</title><link>http://example.org/posts/poetry2/</link><pubDate>Mon, 14 Aug 2023 10:30:04 +0000</pubDate><author>作者</author><guid>http://example.org/posts/poetry2/</guid><description>以下功能中不管是静态检查插件、格式化工具配置、launch profile 等，基本都可以使用 pycharm 和 vscode 做到，但是都同时做到是不可能的，像 black 在 pycharm 中配置起来还是比</description></item><item><title>python日志库loguru</title><link>http://example.org/posts/python%E6%97%A5%E5%BF%97%E5%BA%93loguru/</link><pubDate>Sun, 08 Aug 2021 17:41:41 +0000</pubDate><author>作者</author><guid>http://example.org/posts/python%E6%97%A5%E5%BF%97%E5%BA%93loguru/</guid><description><![CDATA[<p>日志在开发中还是很常用的，虽然我们可以使用最原始的<code>system.out</code>但是这样做太简陋了，我在开发的过程中很多时候都会使用日志，在处理异常的时候或者执行某个关键方法的时候我都会使用日志，因为这样能更好的监控程序，但是使用python中的<code>logging</code>库还是比较麻烦的，虽然每次都是复制粘贴以前写的配置，但是改起来的时候还是挺麻烦的</p>]]></description></item><item><title>下载壁纸当然也得X格拉满</title><link>http://example.org/posts/%E4%B8%8B%E8%BD%BD%E5%A3%81%E7%BA%B8%E5%BD%93%E7%84%B6%E4%B9%9F%E5%BE%97x%E6%A0%BC%E6%8B%89%E6%BB%A1/</link><pubDate>Wed, 19 May 2021 19:08:05 +0000</pubDate><author>作者</author><guid>http://example.org/posts/%E4%B8%8B%E8%BD%BD%E5%A3%81%E7%BA%B8%E5%BD%93%E7%84%B6%E4%B9%9F%E5%BE%97x%E6%A0%BC%E6%8B%89%E6%BB%A1/</guid><description>&lt;p>实不相瞒，作为一个喜欢收集壁纸的boy，我盯上&lt;a href="https://wallhaven.cc/" target="_blank" rel="noopener noreffer">wallhaven&lt;/a>很久了&lt;/p></description></item><item><title>加速下班之collections模块</title><link>http://example.org/posts/%E5%8A%A0%E9%80%9F%E4%B8%8B%E7%8F%AD%E4%B9%8Bcollections%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 26 Apr 2021 15:11:22 +0000</pubDate><author>作者</author><guid>http://example.org/posts/%E5%8A%A0%E9%80%9F%E4%B8%8B%E7%8F%AD%E4%B9%8Bcollections%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97/</guid><description>&lt;p>collections模块实现了特定目标的容器，这些容器能够帮助开发者快速简洁的实现想法&lt;/p></description></item><item><title>Python上下文管理器</title><link>http://example.org/posts/python%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8/</link><pubDate>Sat, 24 Apr 2021 21:56:09 +0000</pubDate><author>作者</author><guid>http://example.org/posts/python%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8/</guid><description>&lt;p>如果经常使用Python应该能注意到Python中经常出现&lt;code>with&lt;/code>关键字。&lt;/p></description></item><item><title>Python MySQL连接池</title><link>http://example.org/posts/python-mysql%E8%BF%9E%E6%8E%A5%E6%B1%A0/</link><pubDate>Thu, 08 Apr 2021 14:36:46 +0000</pubDate><author>作者</author><guid>http://example.org/posts/python-mysql%E8%BF%9E%E6%8E%A5%E6%B1%A0/</guid><description>&lt;p>在并发的场景下，不可避免的就是MySQL的访问问题，由于MySQL的性能并不强，因此在进行并发访问的时候往往会使用连接池。&lt;/p></description></item><item><title>鸭子类型</title><link>http://example.org/posts/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B/</link><pubDate>Mon, 28 Dec 2020 16:24:25 +0000</pubDate><author>作者</author><guid>http://example.org/posts/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B/</guid><description>&lt;p>提到鸭子类型很多人第一反应都是“有一只鸟，走路像鸭子，叫起来像鸭子，那么它就是鸭子。”，这句话没有问题，描述的也的确是鸭子类型，但是在Python中鸭子类型到底是怎么样的呢？&lt;/p></description></item><item><title>cookbook第一章-数据结构和算法</title><link>http://example.org/posts/cookbook%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</link><pubDate>Tue, 15 Dec 2020 16:42:33 +0000</pubDate><author>作者</author><guid>http://example.org/posts/cookbook%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</guid><description>记录了我对cookbook的学习和理解。下方所有笔记均记载在jupyter notebook中， 由于直接渲染markdown效果不佳，所以直接</description></item><item><title>Python设计模式</title><link>http://example.org/posts/python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><pubDate>Sun, 13 Dec 2020 18:49:25 +0000</pubDate><author>作者</author><guid>http://example.org/posts/python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid><description>&lt;p>设计模式：对软件中普遍存在（反复出现）的各种问题，所提出的解决方案。每一个设计模式都系统地命名、解释和评价了面向对象系统中一个重要的和重复出现的设计。&lt;/p></description></item><item><title>协程和异步IO</title><link>http://example.org/posts/%E5%8D%8F%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5io/</link><pubDate>Sat, 14 Nov 2020 16:40:57 +0000</pubDate><author>作者</author><guid>http://example.org/posts/%E5%8D%8F%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5io/</guid><description>&lt;p>协程是属于编程语言中很高级而且很难的知识点&lt;/p></description></item></channel></rss>