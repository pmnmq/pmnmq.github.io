<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Go - 分类 - pujic</title><link>http://example.org/categories/go/</link><description>Go - 分类 - pujic</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>pujichun@outlook.com (普吉春)</managingEditor><webMaster>pujichun@outlook.com (普吉春)</webMaster><lastBuildDate>Sun, 22 May 2022 13:02:44 +0800</lastBuildDate><atom:link href="http://example.org/categories/go/" rel="self" type="application/rss+xml"/><item><title>Go语言是如何运行的</title><link>http://example.org/posts/how-go-works/</link><pubDate>Sun, 22 May 2022 13:02:44 +0800</pubDate><author>作者</author><guid>http://example.org/posts/how-go-works/</guid><description>&lt;p>Go 是编译型语言，不依赖虚拟机，编译成二进制的可执行程序即可运行&lt;/p></description></item><item><title>grpc框架使用</title><link>http://example.org/posts/grpc%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/</link><pubDate>Sun, 28 Feb 2021 15:39:19 +0000</pubDate><author>作者</author><guid>http://example.org/posts/grpc%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/</guid><description>&lt;blockquote>
&lt;p>gRPC是可以在任何环境中运行的现代开源高性能RPC框架。 它可以通过可插拔的支持来有效地连接数据中心内和跨数据中心的服务，以实现负载平衡，跟踪，运行状况检查和身份验证。 它也适用于分布式计算的最后一英里，以将设备，移动应用程序和浏览器连接到后端服务。&lt;/p>
&lt;/blockquote></description></item><item><title>go-rpc</title><link>http://example.org/posts/go-rpc/</link><pubDate>Fri, 26 Feb 2021 14:06:30 +0000</pubDate><author>作者</author><guid>http://example.org/posts/go-rpc/</guid><description>&lt;p>在传统的Web服务中，通常是一个服务器完成一套或多套部署方案，但是随着用户的快速增长，一个服务器上的服务要完成的工作量越来越大而且也越来越复杂，就算使用多线程进行处理，但是因为业务逻辑的复杂性导致线程进行等待的时间变得很长，那么这时候就需要对业务进行拆分，将复杂的业务拆分为一个一个的小业务。比如大多数用户对网站首页发起请求的时候，如果所有业务逻辑都在一个服务上，不考虑其他页面的业务逻辑，就单纯请求首页的压力都是巨大的，而且一旦业务复杂，想要在后端实现并发难度是十分大的，但是如果我们将一个个业务进行解耦出来，那么业务逻辑将变得简单简单清晰，同时相对应的一些服务将能够容易的并发起来&lt;/p>
&lt;p>随着微服务架构的兴起，RPC的应用越来越广泛&lt;/p></description></item><item><title>goroutine 02</title><link>http://example.org/posts/%E5%AD%A6%E4%B9%A0goroutine-2/</link><pubDate>Mon, 11 Jan 2021 16:35:08 +0000</pubDate><author>作者</author><guid>http://example.org/posts/%E5%AD%A6%E4%B9%A0goroutine-2/</guid><description>&lt;p>学习goroutine&lt;/p></description></item><item><title>go标准库context</title><link>http://example.org/posts/go-context/</link><pubDate>Mon, 11 Jan 2021 09:57:32 +0000</pubDate><author>作者</author><guid>http://example.org/posts/go-context/</guid><description>&lt;p>Context是go中专门用来处理多个goroutine之间上下文管理的问题，在go1.7的时候被加入go的标准库中&lt;/p></description></item><item><title>goroutine 01</title><link>http://example.org/posts/%E5%AD%A6%E4%B9%A0goroutine-1/</link><pubDate>Sun, 08 Nov 2020 00:25:10 +0000</pubDate><author>作者</author><guid>http://example.org/posts/%E5%AD%A6%E4%B9%A0goroutine-1/</guid><description>&lt;p>在Go语言中开启并发只需要使用&lt;code>go&lt;/code>关键字&lt;/p></description></item><item><title>Go原生Web-Handler请求</title><link>http://example.org/posts/go%E5%8E%9F%E7%94%9Fweb-handler%E8%AF%B7%E6%B1%82/</link><pubDate>Sat, 31 Oct 2020 23:32:34 +0000</pubDate><author>作者</author><guid>http://example.org/posts/go%E5%8E%9F%E7%94%9Fweb-handler%E8%AF%B7%E6%B1%82/</guid><description>&lt;p>Go原生Web学习&lt;/p></description></item><item><title>Python and Go测试</title><link>http://example.org/posts/python-go%E6%B5%8B%E8%AF%95/</link><pubDate>Mon, 26 Oct 2020 12:51:40 +0000</pubDate><author>作者</author><guid>http://example.org/posts/python-go%E6%B5%8B%E8%AF%95/</guid><description>&lt;p>程序做调试其实是比较麻烦的，但是得益于&lt;code>jet brains&lt;/code>的IDE让我们调试起来十分方便，但是如果程序比较复杂，那么我们调试起来还是很麻烦，其实我做调试更多的是去看这个变量中存了哪些值是什么而不是为了因为程序有bug而去找bug，当程序出错的时候我更想快速的知道到底是哪里出错了，而不是慢慢的去调试&lt;/p></description></item><item><title>Go性能调优</title><link>http://example.org/posts/go%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</link><pubDate>Mon, 26 Oct 2020 20:50:09 +0800</pubDate><author>作者</author><guid>http://example.org/posts/go%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</guid><description>&lt;p>在计算机性能调试领域里，profiling 是指对应用程序的画像，画像就是应用程序使用 CPU 和内存的情况。 Go语言是一个对性能特别看重的语言，因此语言中自带了 profiling 的库，这篇文章就要讲解怎么在 golang 中做 profiling。&lt;/p></description></item><item><title>Go项目配置管理Viper</title><link>http://example.org/posts/go%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86--viper/</link><pubDate>Sun, 25 Oct 2020 15:37:41 +0800</pubDate><author>作者</author><guid>http://example.org/posts/go%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86--viper/</guid><description>&lt;p>Viper是适用于Go应用程序的完整配置解决方案。它被设计用于在应用程序中工作，并且可以处理所有类型的配置需求和格式&lt;/p></description></item></channel></rss>