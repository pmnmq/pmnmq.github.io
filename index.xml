<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>pujic</title><link>http://example.org/</link><description>pujic</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>pujichun@outlook.com (普吉春)</managingEditor><webMaster>pujichun@outlook.com (普吉春)</webMaster><lastBuildDate>Mon, 15 Jul 2024 10:40:33 +0000</lastBuildDate><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux 指北</title><link>http://example.org/posts/linux%E6%8C%87%E5%8C%97/</link><pubDate>Mon, 15 Jul 2024 10:40:33 +0000</pubDate><author>作者</author><guid>http://example.org/posts/linux%E6%8C%87%E5%8C%97/</guid><description>Linux 常识 也许这篇文章对你没有任何作用，因为它更多的是我这4年来将 Linux 作为我日常系统之一的一些理解，如果你系统学过 Linux 运维，那么这篇文章对你应该是没</description></item><item><title>Rust Axum框架</title><link>http://example.org/posts/rust_axum/</link><pubDate>Sat, 09 Mar 2024 13:56:48 +0800</pubDate><author>作者</author><guid>http://example.org/posts/rust_axum/</guid><description></description></item><item><title>防抖与节流</title><link>http://example.org/posts/%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/</link><pubDate>Sun, 14 Jan 2024 22:51:53 +0800</pubDate><author>作者</author><guid>http://example.org/posts/%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/</guid><description>&lt;p>节流是控制函数在一定时间间隔内只执行一次，防抖是确保函数在停止触发后延迟一定时间再执行。&lt;/p>
&lt;p>在前端中节流和防抖是常见的优化手段&lt;/p></description></item><item><title>2023年总结</title><link>http://example.org/posts/2023%E5%B9%B4%E6%80%BB%E7%BB%93/</link><pubDate>Sun, 31 Dec 2023 23:20:17 +0800</pubDate><author>作者</author><guid>http://example.org/posts/2023%E5%B9%B4%E6%80%BB%E7%BB%93/</guid><description>2023 2022年是我这五年中对我产生影响最大的一年，被许多人、许多事影响，2023更多的是在思考。 最佳动漫台词 旅行的话，你想去哪里？—— 《海贼王</description></item><item><title>用 Rust 开发一个 python 模块</title><link>http://example.org/posts/rust_%E5%BC%80%E5%8F%91python%E6%A8%A1%E5%9D%97/</link><pubDate>Sat, 23 Sep 2023 22:05:27 +0800</pubDate><author>作者</author><guid>http://example.org/posts/rust_%E5%BC%80%E5%8F%91python%E6%A8%A1%E5%9D%97/</guid><description>&lt;p>python urllib3 内存泄漏问题偶尔会蹦出来烦我一下，于是萌生了能不能用 Rust 写一个请求库&lt;/p></description></item><item><title>Rust Send 和 Sync</title><link>http://example.org/posts/rust_send_sync/</link><pubDate>Thu, 24 Aug 2023 22:05:27 +0800</pubDate><author>作者</author><guid>http://example.org/posts/rust_send_sync/</guid><description>Send 和 Sync 这两个 Trait 在跨线程的时候需要关注 Send: A type is Send if it is safe to send it to another thread. Sync: A type is Sync if it is safe to share between threads (T is Sync if and only if &amp;amp;T is Send) Send 和 Sync 是 Rust 并发机制的基础。因</description></item><item><title>Cargo镜像仓库设置</title><link>http://example.org/posts/cargo_mirrors/</link><pubDate>Tue, 22 Aug 2023 23:14:04 +0800</pubDate><author>作者</author><guid>http://example.org/posts/cargo_mirrors/</guid><description>cargo 1.68 版本开始支持稀疏索引：不再需要完整克隆 crates.io-index 仓库，可以加快获取包的速度。如果 cargo 版本大于等于 1.68，可以直接使用而不需要开启 nightly。</description></item><item><title>Homebrew 安装和换源</title><link>http://example.org/posts/homebrew_install/</link><pubDate>Mon, 21 Aug 2023 22:59:35 +0800</pubDate><author>作者</author><guid>http://example.org/posts/homebrew_install/</guid><description>安装 安装部分参考清华大学开源镜像站 如果有代理可以直接使用官方文档中的方式直接安装 替换源 同样参考清华大学开源镜像站的文档，但是需要注意，hom</description></item><item><title>poetry - python 的包管理工具</title><link>http://example.org/posts/poetry2/</link><pubDate>Sat, 20 May 2023 10:30:04 +0000</pubDate><author>作者</author><guid>http://example.org/posts/poetry2/</guid><description>以下功能中不管是静态检查插件、格式化工具配置、launch profile 等，基本都可以使用 pycharm 和 vscode 做到，但是都同时做到是不可能的，像 black 在 pycharm 中配置起来还是比</description></item><item><title>go 上下文context</title><link>http://example.org/posts/go-context/</link><pubDate>Tue, 11 Apr 2023 09:57:32 +0000</pubDate><author>作者</author><guid>http://example.org/posts/go-context/</guid><description>&lt;p>Context是go中专门用来处理多个goroutine之间上下文管理的问题，在go1.7的时候被加入go的标准库中&lt;/p></description></item></channel></rss>